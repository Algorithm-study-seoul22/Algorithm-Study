#include <iostream>
using namespace std;

char U[3][3], D[3][3], F[3][3], B[3][3], L[3][3], R[3][3];

void B2D() {
  char temp[3][3];
  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 3; x++)
      temp[y][x] = U[y][x];
  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 3; x++)
      U[y][x] = F[y][x];
  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 3; x++)
      F[y][x] = D[y][x];
  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 3; x++)
      D[y][x] = B[y][x];
  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 3; x++)
      B[y][x] = temp[y][x];
  char c = L[0][0];
  L[0][0] = L[2][0];
  L[2][0] = L[2][2];
  L[2][2] = L[0][2];
  L[0][2] = c;
  c = L[1][0];
  L[1][0] = L[2][1];
  L[2][1] = L[1][2];
  L[1][2] = L[0][1];
  L[0][1] = c;
  c = R[0][0];
  R[0][0] = R[0][2];
  R[0][2] = R[2][2];
  R[2][2] = R[2][0];
  R[2][0] = c;
  c = R[0][1];
  R[0][1] = R[1][2];
  R[1][2] = R[2][1];
  R[2][1] = R[1][0];
  R[1][0] = c;
}

void F2R() {
  char c;
  c = F[0][0];
  F[0][0] = L[0][2];
  L[0][2] = B[2][2];
  B[2][2] = R[2][0];
  R[2][0] = c;
  c = F[0][1];
  F[0][1] = L[1][2];
  L[1][2] = B[2][1];
  B[2][1] = R[1][0];
  R[1][0] = c;
  c = F[0][2];
  F[0][2] = L[2][2];
  L[2][2] = B[2][0];
  B[2][0] = R[0][0];
  R[0][0] = c;
  c = F[1][0];
  F[1][0] = L[0][1];
  L[0][1] = B[1][2];
  B[1][2] = R[2][1];
  R[2][1] = c;
  c = F[1][1];
  F[1][1] = L[1][1];
  L[1][1] = B[1][1];
  B[1][1] = R[1][1];
  R[1][1] = c;
  c = F[1][2];
  F[1][2] = L[2][1];
  L[2][1] = B[1][0];
  B[1][0] = R[0][1];
  R[0][1] = c;
  c = F[2][0];
  F[2][0] = L[0][0];
  L[0][0] = B[0][2];
  B[0][2] = R[2][2];
  R[2][2] = c;
  c = F[2][1];
  F[2][1] = L[1][0];
  L[1][0] = B[0][1];
  B[0][1] = R[1][2];
  R[1][2] = c;
  c = F[2][2];
  F[2][2] = L[2][0];
  L[2][0] = B[0][0];
  B[0][0] = R[0][2];
  R[0][2] = c;
  c = U[0][0];
  U[0][0] = U[2][0];
  U[2][0] = U[2][2];
  U[2][2] = U[0][2];
  U[0][2] = c;
  c = U[1][0];
  U[1][0] = U[2][1];
  U[2][1] = U[1][2];
  U[1][2] = U[0][1];
  U[0][1] = c;
  c = D[0][0];
  D[0][0] = D[0][2];
  D[0][2] = D[2][2];
  D[2][2] = D[2][0];
  D[2][0] = c;
  c = D[0][1];
  D[0][1] = D[1][2];
  D[1][2] = D[2][1];
  D[2][1] = D[1][0];
  D[1][0] = c;
}

void rotate_D(char dir) {
  if (dir == '-') {
    char c = D[0][0];
    D[0][0] = D[2][0];
    D[2][0] = D[2][2];
    D[2][2] = D[0][2];
    D[0][2] = c;
    c = D[1][0];
    D[1][0] = D[2][1];
    D[2][1] = D[1][2];
    D[1][2] = D[0][1];
    D[0][1] = c;
    c = F[0][0];
    F[0][0] = R[2][0];
    R[2][0] = B[2][2];
    B[2][2] = L[0][2];
    L[0][2] = c;
    c = F[0][1];
    F[0][1] = R[1][0];
    R[1][0] = B[2][1];
    B[2][1] = L[1][2];
    L[1][2] = c;
    c = F[0][2];
    F[0][2] = R[0][0];
    R[0][0] = B[2][0];
    B[2][0] = L[2][2];
    L[2][2] = c;
  } else {
    char c = D[0][0];
    D[0][0] = D[0][2];
    D[0][2] = D[2][2];
    D[2][2] = D[2][0];
    D[2][0] = c;
    c = D[0][1];
    D[0][1] = D[1][2];
    D[1][2] = D[2][1];
    D[2][1] = D[1][0];
    D[1][0] = c;
    c = F[0][0];
    F[0][0] = L[0][2];
    L[0][2] = B[2][2];
    B[2][2] = R[2][0];
    R[2][0] = c;
    c = F[0][1];
    F[0][1] = L[1][2];
    L[1][2] = B[2][1];
    B[2][1] = R[1][0];
    R[1][0] = c;
    c = F[0][2];
    F[0][2] = L[2][2];
    L[2][2] = B[2][0];
    B[2][0] = R[0][0];
    R[0][0] = c;
  }
}

void change_D(char pos) {
  char d;
  if (pos == 'U')
    d = 'w';
  else if (pos == 'D')
    d = 'y';
  else if (pos == 'F')
    d = 'r';
  else if (pos == 'B')
    d = 'o';
  else if (pos == 'L')
    d = 'g';
  else if (pos == 'R')
    d = 'b';
  if (U[1][1] == d) {
    B2D();
    B2D();
  } else if (F[1][1] == d) {
    B2D();
    B2D();
    B2D();
  } else if (B[1][1] == d) {
    B2D();
  } else if (L[1][1] == d) {
    F2R();
    B2D();
    B2D();
    B2D();
  } else if (R[1][1] == d) {
    F2R();
    B2D();
  }
}

int main(void) {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t, n;
  char pos, dir;
  cin >> t;
  while (t--) {
    for (int y = 0; y < 3; y++) {
      for (int x = 0; x < 3; x++) {
        U[y][x] = 'w';
        D[y][x] = 'y';
        F[y][x] = 'r';
        B[y][x] = 'o';
        L[y][x] = 'g';
        R[y][x] = 'b';
      }
    }
    cin >> n;
    for (int i = 0; i < n; i++) {
      cin >> pos >> dir;
      change_D(pos);
      rotate_D(dir);
    }
    change_D('D');
    while (F[1][1] != 'r')
      F2R();
    for (int y = 3 - 1; y >= 0; y--) {
      for (int x = 0; x < 3; x++) {
        cout << U[y][x];
      }
      cout << '\n';
    }
  }
  return 0;
}
